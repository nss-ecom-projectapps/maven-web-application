pipeline{

//Use this 'agent any' to use master branch
agent any
//Use below agent script to use any particular branch, e.g., 'development,' 'qa,' etc.
/*
agent{
label 'nodejsslave'
}
*/

tools{
maven 'maven3.8.6'
}

triggers{
//pollSCM
pollSCM('* * * * *')
//build periodically
//cron('* * * * *')
//GitHub WebHook
//githubPush()
}

options{
buildDiscarder(logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '5', daysToKeepStr: '', numToKeepStr: '5'))

//built-in function for adding timestamp in build info(console output)

timestamps()
}

stages{

//Get the code from GitHub
  stage('CheckoutCode'){
    steps{
         slacknotifications('STARTED')
    git branch: 'development', credentialsId: '684beece-d175-4f5e-b53b-aa1edb7a41f5', url: 'https://github.com/nss-ecom-projectapps/maven-web-application.git'
    }
  }

//Do the build
  stage('Build'){
    steps{
      sh "mvn clean package"
    }
  }
  
//Execute SonarQube Report
  stage('ExecuteSonarQubeReport'){
    steps{
    sh "mvn clean sonar:sonar"
    }
    }

//Upload Artifact into Nexus repo
  stage('UploadArtifactsintoNexus'){
    steps{
    sh "mvn clean deploy"
    }
  }
  
//Deploying Application into Tomcat Server
  stage('DeployAppintoTomcatServer'){
    steps{
    sshagent(['ed4ccb5a-c8d7-4812-aed2-0f5a336abc65']) {
sh "scp -o StrictHostKeyChecking=no target.maven-web-application.war <username>@ipaddress-of-linux-server:/opt/apache-tomcat-9.0.65/webapps/"
    }
  }
 }
 
 post{
 
 //sending slack notification
   success {
       slacknotifications(currentBuild.result)
  }
  
  failure {
       slacknotifications(currentBuild.result)
  }
 
 
 /*
    success{
    emailext body: '''Build Success..declarative way.

    Regards,
    ForeFendTech.''', subject: 'Build Success..declarative way', to: 'venkatactaladi@gmail.com'

    //built-in function to clear the workspace
    cleanWS()
    }
    
    failure{
    emailext body: '''Build Failure...declarative way.

    Regards,
    ForeFendTech.''', subject: 'Build Failure..declarative way', to: 'venkatactaladi@gmail.com'
    
    //built-in function to clear the workspace
    cleanWS()
    }
    
    always{
    emailext body: '''Build Failure...declarative way.

    Regards,
    ForeFendTech.''', subject: 'Build Failure..declarative way', to: 'venkatactaladi@gmail.com'
    
    //built-in function to clear the workspace
    cleanWS()
    }
  */
  }//closing post
 }//closing stages
}//closing pipeline

//Defining slack notification function
def slackNotifications(String buildStatus = 'STARTED') {
  // build status of null means successful
  buildStatus =  buildStatus ?: 'SUCCESSFUL'

  // Default values
  def colorName = 'RED'
  def colorCode = '#FF0000'
  def subject = "${buildStatus}: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'"
  def summary = "${subject} (${env.BUILD_URL})"

  // Override default values based on build status
  if (buildStatus == 'STARTED') {
    color = 'YELLOW'
    colorCode = '#FFFF00'
  } else if (buildStatus == 'SUCCESSFUL') {
    color = 'GREEN'
    colorCode = '#00FF00'
  } else {
    color = 'RED'
    colorCode = '#FF0000'
  }
  }//closing slack notification
